// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "proving_network.proto" (package "proving_network", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message proving_network.ProveTaskRequest
 */
export interface ProveTaskRequest {
    /**
     * @generated from protobuf field: repeated string inputs = 1
     */
    inputs: string[];
}
/**
 * @generated from protobuf message proving_network.ProveTaskResponse
 */
export interface ProveTaskResponse {
    /**
     * @generated from protobuf field: string task_id = 1
     */
    taskId: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ProveTaskRequest$Type extends MessageType<ProveTaskRequest> {
    constructor() {
        super("proving_network.ProveTaskRequest", [
            { no: 1, name: "inputs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProveTaskRequest>): ProveTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.inputs = [];
        if (value !== undefined)
            reflectionMergePartial<ProveTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProveTaskRequest): ProveTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string inputs */ 1:
                    message.inputs.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProveTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string inputs = 1; */
        for (let i = 0; i < message.inputs.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.inputs[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proving_network.ProveTaskRequest
 */
export const ProveTaskRequest = new ProveTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProveTaskResponse$Type extends MessageType<ProveTaskResponse> {
    constructor() {
        super("proving_network.ProveTaskResponse", [
            { no: 1, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProveTaskResponse>): ProveTaskResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = "";
        if (value !== undefined)
            reflectionMergePartial<ProveTaskResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProveTaskResponse): ProveTaskResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_id */ 1:
                    message.taskId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProveTaskResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_id = 1; */
        if (message.taskId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proving_network.ProveTaskResponse
 */
export const ProveTaskResponse = new ProveTaskResponse$Type();
/**
 * @generated ServiceType for protobuf service proving_network.ProvingNetwork
 */
export const ProvingNetwork = new ServiceType("proving_network.ProvingNetwork", [
    { name: "ProveTask", options: {}, I: ProveTaskRequest, O: ProveTaskResponse }
]);
